;; Programming Languages, Homework 5

#lang racket
(provide (all-defined-out)) 

;; definition of structures for MUPL programs 
(struct var  (string) #:transparent)  ;; a variable, e.g., (var "foo")
(struct int  (num)    #:transparent)  ;; a constant number, e.g., (int 17)
(struct add  (e1 e2)  #:transparent)  ;; add two expressions
(struct ifgreater (e1 e2 e3 e4)    #:transparent) ;; if e1 > e2 then e3 else e4
(struct fun  (nameopt formal body) #:transparent) ;; a recursive(?) 1-argument function
(struct call (funexp actual)       #:transparent) ;; function call
(struct mlet (var e body) #:transparent) ;; a local binding (let var = e in body) 
(struct apair (e1 e2)     #:transparent) ;; make a new pair
(struct fst  (e)    #:transparent) ;; get first part of a pair
(struct snd  (e)    #:transparent) ;; get second part of a pair
(struct aunit ()    #:transparent) ;; unit value -- good for ending a list
(struct isaunit (e) #:transparent) ;; evaluate to 1 if e is unit else 0

;; a closure is not in "source" programs; it is what functions evaluate to
(struct closure (env fun) #:transparent) 

;; Problem 1

(define (racketlist->mupllist list)
  (cond [(null? list) (aunit)]
        [#t (apair (car list) (racketlist->mupllist (cdr list)))]))


(define (mupllist->racketlist list)
  (cond [(aunit? list) '()]
        [#t (cons (apair-e1 list) (mupllist->racketlist (apair-e2 list)))]))



;; Problem 2


(define (envlookup env str)
  (cond [(null? env) (error "unbound variable during evaluation" str)]
        [(equal? (car (car env)) str) (cdr (car env))]
        [#t (envlookup (cdr env) str)]))



(define (eval-under-env e env)
  (cond [(var? e) 
         (envlookup env (var-string e))]
        [(add? e) 
         (let ([v1 (eval-under-env (add-e1 e) env)]
               [v2 (eval-under-env (add-e2 e) env)])
           (if (and (int? v1)
                    (int? v2))
               (int (+ (int-num v1) 
                       (int-num v2)))
               (error "MUPL addition applied to non-number")))]
        [(int? e)
          e]
        [(ifgreater? e)
         (let ([v1 (eval-under-env (ifgreater-e1 e) env)]
               [v2 (eval-under-env (ifgreater-e2 e) env)])
           (if (and (int? v1) (int? v2))
               (if (> (int-num v1) (int-num v2))
                   (eval-under-env (ifgreater-e3 e) env) 
                   (eval-under-env (ifgreater-e4 e) env))
               (error "MUPL ifgreater applied to non-number")))]
        [(fun? e)
         (letrec ([funcname (fun-nameopt e)]
                  [newenv (if funcname
                              (cons (cons funcname newclosure) env)
                              env)]
                  [newclosure (closure newenv (fun-body e))])
           newclosure)]      
        [(call? e)
         (letrec ([arg (eval-under-env (call-actual e) env)]
               [curclosure (eval-under-env (call-funexp e) env)]
               [funcbody (fun-body (closure-fun curclosure))]
               [funcformal (fun-formal (closure-fun curclosure))])
           (if (closure? curclosure)
               (eval-under-env (fun-body (closure-fun curclosure)) (cons (cons funcformal arg) (closure-env curclosure)))
               (error "MUPL can't call a function that isn't a closure")))]
        [(mlet? e)
         (letrec ([val (eval-under-env (mlet-e e) env)]
               [newenv (cons (cons (mlet-var e) val) env)])
           (eval-under-env (mlet-body e) newenv))]
        [(apair? e)
         (letrec ([p1 (eval-under-env (apair-e1 e) env)]
                 [p2 (eval-under-env (apair-e2 e) env)])
           (apair p1 p2))]
        [(fst? e)
         (let ([p (eval-under-env (fst-e e) env)])
           (if (apair? p)
               (apair-e1 p)
               (error "MULP fst applied to non-pair")))]
        [(snd? e)
         (let ([p (eval-under-env (snd-e e) env)])
           (if (apair? p)
               (apair-e2 p)
               (error "MULP fst applied to non-pair")))]
        [(aunit? e)
         (aunit)]
        [(isaunit? e)
         (let ([p (eval-under-env (isaunit-e e) env)])
           (if (aunit? p)
               (int 1)
               (int 0)))]
        [(closure? e)
         (closure (append (closure-env e) env) (closure-fun e))]
        [#t ((error (format "bad MUPL expression: ~v" e)))]))


(define (eval-exp e)
  (eval-under-env e null))

;; Problem 3

(define (ifaunit e1 e2 e3) 
  (ifgreater (isaunit e1) (int 0) e2 e3))

(define (mlet* lstlst e2) 
  (if (null? lstlst)
      e2
      (let ([binding (car lstlst)]
            [remaining (cdr lstlst)])
        (mlet (car binding) (cdr binding) (mlet* remaining e2)))))

(define (ifeq e1 e2 e3 e4) 
  (mlet* (list (cons "x1" e1) (cons "x2" e2))
         (ifgreater (var "x1") (var "x2") e4
                    (ifgreater (var "x2") (var "x1") e4 e3))))

;; Problem 4

;(define mupl-map
;  (fun #f "func"
;       (fun "map" "lst"
;            (ifaunit (var "lst")
;                     (aunit)
;                     (apair 
;                      (call (var "func") (fst (var "func")))
;                      (call (var "map") (snd (var "lst"))))))))

(define mupl-map 
  (fun #f "func"
       (fun "mapr" "lst"
            (ifaunit (var "lst")
                     (aunit)
                     (apair 
                      (call (var "func") (fst (var "lst")))
                      (call (var "mapr") (snd (var "lst")))))
            )))
  

(define mupl-mapAddN 
  (mlet "map" mupl-map
        "CHANGE (notice map is now in MUPL scope)"))

;; Challenge Problem

(struct fun-challenge (nameopt formal body freevars) #:transparent) ;; a recursive(?) 1-argument function

;; We will test this function directly, so it must do
;; as described in the assignment
(define (compute-free-vars e) "CHANGE")

;; Do NOT share code with eval-under-env because that will make
;; auto-grading and peer assessment more difficult, so
;; copy most of your interpreter here and make minor changes
(define (eval-under-env-c e env) "CHANGE")

;; Do NOT change this
(define (eval-exp-c e)
  (eval-under-env-c (compute-free-vars e) null))
